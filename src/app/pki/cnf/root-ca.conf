# Simple root CA OpenSSL configuration file.
# Used to create a self-signed Root CA certificate and to sign intermediate CAs certificates.

# ##################################################################################################
# The first section of this configuration file is special and is referred to as the default section.
# This section is usually unnamed and spans from the start of file until the first named section.
# It contains global constants that can be referred to from the entire configuration file.
# It may also hold settings pertaining to more than one openssl command.
# ##################################################################################################

HOME = . # This definition stops the following lines choking if HOME isn't defined.
#dir = /etc/ssl/ca/root-ca # Top dir where everything is kept
dir = ./ca/root-ca
caname=root-ca # CA name

# Advanced PKI configuration
#base_url = http://domain.tld/ca # CA base URL
#aia_url = $base_url/$ca.cer # CA certificate URL
#crl_url = $base_url/$ca.crl # CRL distribution point

# ##################################################################################################
# The next part of the configuration file is used by the openssl req command.
# It defines the CA's key pair, its DN, and the desired extensions for the CA certificate.
# ##################################################################################################

[ req ]
default_bits = 4096 # RSA key size. The same as -newkey command line option.
default_keyfile = $dir/private/$caname.key.pem # default filename to write a private key to -keyout
encrypt_key = no # Protect private key. The same as -nodes command line option.
default_md = sha512 # MD to use. The same as -digest command line option.
string_mask = utf8only # Emit UTF-8 strings
utf8 = yes # Input is UTF-8
distinguished_name = req_defined_distinguished_name # Specifies the section that defines the information needed to generate a self-signed certificate or certificate request. This field is required for both self-signed certificates and certificate requests.
attributes = req_attributes # section containing any request attributes
req_extensions = req_ext # Desired extensions to add to a certificate request.
prompt = no # Don't prompt for DN
#x509_extensions = req_ext # The extensions to add to a self-signed certificate. usefull if you prefer self-sign Root CA certificate with req command.

# Not used parameters
#input_password = # password for the input private key file. The same as -passin command line option.
#output_password = # password for the output private key file. The same as -passout command line option.
#oid_file # file containing additional OBJECT IDENTIFIERS
#oid_section = new_oids # extra object identifiers

[ req_defined_distinguished_name ]
O = "Debian Buster"
CN = "Buster Root Certification Authority"

[ req_attributes ]
# empty

# ##################################################################################################
# The remainder of the configuration file is used by the openssl ca command.
# The CA section defines the locations of CA assets, as well as the policies applying to the CA.
# ##################################################################################################

[ ca ]
default_ca = CA_default # The default CA section

[ CA_default ]
certs = $dir/newcerts
new_certs_dir = $certs # The same as the -outdir command line option. It specifies the directory where new certificates will be placed. Mandatory.

database = $dir/db/$caname.index.txt # The text database file to use. Mandatory. This file must be present though initially it will be empty.
RANDFILE = $dir/private/.rand # This is a random file to read/write random data to/from.
serial = $dir/db/$caname.srl # A text file containing the next serial number to use in hex. Mandatory. This file must be present and contain a valid serial number.

crlnumber = $dir/db/$caname.crlnumber # A text file containing the next CRL number to use in hex. The crl number will be inserted in the CRLs only if this file exists. If this file is present, it must contain a valid CRL number.
crl =$dir/crl/$caname.crl.pem # The current CRL.
default_crl_days = 365 # How long before next CRL. The same as the -crldays command line option. This will only be used if neither command line option is present.

certificate = $new_certs_dir/$caname.crt.pem # The same as -cert command line option. It gives the file containing the CA certificate. Mandatory.
private_key = $dir/private/$caname.key.pem # Same as the -keyfile command line option. The file containing the CA private key. Mandatory.

default_days = 365 # The same as the -days command line option. The number of days to certify a certificate for.
preserve = no # Keep passed DN ordering. The same as -preserveDN command line option.
default_md = sha512 # The same as the -md comand line option. Mandatory except where the signing algorithm does not require a digest (i.e. Ed25519 and Ed448).

x509_extensions = root_ca_ext # Default cert extensions. The same as -extensions command line option.
copy_extensions = none # Determines how extensions in certificate requests should be handled. copy_extensions	= copy
unique_subject = no # Require unique subject

policy = policy_ca # Default naming policy. The same as -policy command line option. Mandatory. See the POLICY FORMAT section for more information.
name_opt = multiline,-esc_msb,utf8 # Subject DN UTF8 display options. These options allow the format used to display the certificate details when asking the user to confirm signing.
cert_opt = ca_default # Certificate display options. It allows the format used to display the certificate details when asking the user to confirm signing.

email_in_dn = no # The same as -noemailDN command line option. If you want the EMAIL field to be removed from the DN of the certificate simply set this to 'no'. If not present the default is to allow for the EMAIL filed in the certificate's DN.
crl_extensions = crl_ext # CRL extensions. The same as -crlexts command line option.

# ##################################################################################################
# Naming policies control which parts of a DN end up in the certificate and
# under what circumstances certification should be denied.
# ##################################################################################################

[ policy_ca ]
countryName = optional # Included if present
stateOrProvinceName = optional # Included if present
localityName = optional # Included if present
organizationName = supplied # Must match
organizationalUnitName = optional # Included if present
commonName = supplied # Must be present
emailAddress = optional # Included if present

# ##################################################################################################
# Certificate extensions define what types of certificates the CA is able to create.
# ##################################################################################################
# keyUsage:
#
# keyCertSign
#   - Subject public key is used to verify signatures on certificates
#   - This extension must only be used for CA certificates
#
# cRLSign
#   - Subject public key is to verify signatures on revocation information, such as a CRL
#   - This extension must only be used for CA certificates
#
# digitalSignature
#   - Certificate may be used to apply a digital signature
#   - Digital signatures are often used for entity authentication & data origin authentication with integrity
#
# nonRepudiation
#   - Certificate may be used to sign data as above but the certificate public key may be used to provide non-repudiation services
#   - This prevents the signing entity from falsely denying some action
#
# keyEncipherment
#   - Certificate may be used to encrypt a symmetric key which is then transferred to the target
#   - Target decrypts key, subsequently using it to encrypt & decrypt data between the entities
#
# dataEncipherment
#   - Certificate may be used to encrypt & decrypt actual application data
#
# keyAgreement
#   - Certificate enables use of a key agreement protocol to establish a symmetric key with a target
#   - Symmetric key may then be used to encrypt & decrypt data sent between the entities
#
# encipherOnly
#   - Public key used only for enciphering data while performing key agreement
#   - Req. KU: keyAgreement
#
# decipherOnly
#   - Public key used only for deciphering data while performing key agreement
#   -Req. KU: keyAgreement
# ##################################################################################################

[ req_ext ]
# Extensions to use when generating the root CA certificate signing request
subjectKeyIdentifier = hash # specifies how to identify the public key being certified.
basicConstraints = critical, CA:true, pathlen:1
keyUsage = critical, digitalSignature, keyCertSign, cRLSign # digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment, keyAgreement, encipherOnly, decipherOnly
subjectAltName = @alt_ca_main

[ crl_ext ]
# CRL extensions exist solely to point to the CA certificate that has issued the CRL.
authorityKeyIdentifier = keyid:always #, issuer:always
#issuerAltName = issuer:copy # Advanced PKI configuration
#authorityInfoAccess = @issuer_info # Advanced PKI configuration

[ root_ca_ext ]
# Extensions to use when self-signing the root CA
subjectKeyIdentifier = hash # specifies how to identify the public key being certified.
authorityKeyIdentifier = keyid:always, issuer # specifies how to identify the public key being used to verify the signature on this certificate, and enables keys used by the same CA to be distinguished.
issuerAltName = issuer:copy
basicConstraints = critical, CA:true, pathlen:1
keyUsage = critical, digitalSignature, keyCertSign, cRLSign # digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment, keyAgreement, encipherOnly, decipherOnly
subjectAltName = @alt_ca_main
#authorityInfoAccess = @issuer_info # Advanced PKI configuration
#crlDistributionPoints = @crl_info # Advanced PKI configuration

[ signing_ca_ext ]
# Extensions to use when root CA sign an intermediate signing CA
subjectKeyIdentifier = hash # specifies how to identify the public key being certified.
authorityKeyIdentifier = keyid:always # specifies how to identify the public key being used to verify the signature on this certificate, and enables keys used by the same CA to be distinguished.
issuerAltName = issuer:copy
basicConstraints = critical, CA:true, pathlen:0
keyUsage = critical, keyCertSign, cRLSign # digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment, keyAgreement, encipherOnly, decipherOnly
subjectAltName = @alt_signing_ica
#authorityInfoAccess = @issuer_info # Advanced PKI configuration
#crlDistributionPoints = @crl_info # Advanced PKI configuration

# ##################################################################################################
# Establish SubjectAltName (SAN) Profiles.
# ##################################################################################################

[ alt_ca_main ]
DNS.0 = Buster Root Certification Authority
IP.0 = 127.0.0.1
email.0 = root@localhost

# Code Signing Certificate Authorities #
[ alt_signing_ica ]
DNS.0 = Buster Intermediate Signing Certification Authority
IP.0 = 127.0.0.1
email.0 = root@localhost

# ##################################################################################################
# Advanced PKI configuration
# ##################################################################################################

#[ issuer_info ]
#caIssuers; URI.0 = $aia_url

#[ crl_info ]
#URI.0 = $crl_url
