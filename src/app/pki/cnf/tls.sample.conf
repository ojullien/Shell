# Simple OpenSSL configuration file for TLS certificate.
# This file is used by the openssl req command.

dir = ./ca/signing-ca
name=domain.tld

[ req ]
default_bits = 4096 # RSA key size. The same as -newkey command line option.
default_keyfile = $dir/private/$name.key.pem # default filename to write a private key to -keyout
encrypt_key = no # Protect private key. The same as -nodes command line option.
default_md = sha512 # MD to use. The same as -digest command line option.
string_mask = utf8only # Emit UTF-8 strings
utf8 = yes # Input is UTF-8
distinguished_name = req_defined_distinguished_name # Specifies the section that defines the information needed to generate a self-signed certificate or certificate request. This field is required for both self-signed certificates and certificate requests.
attributes = req_attributes # section containing any request attributes
req_extensions = req_ext # Desired extensions to add to a certificate request.
prompt = no # Don't prompt for DN

[ req_defined_distinguished_name ]
C = "FR"
ST = "Pays de la Loire"
L = "Nantes"
O = "The Email Certificate Compagny"
CN = "domain.tld"

[ req_attributes ]
# empty

# ##################################################################################################
# Certificate extensions define what types of certificates the CA is able to create.
# ##################################################################################################
# keyUsage:
#
# keyCertSign
#   - Subject public key is used to verify signatures on certificates
#   - This extension must only be used for CA certificates
#
# cRLSign
#   - Subject public key is to verify signatures on revocation information, such as a CRL
#   - This extension must only be used for CA certificates
#
# digitalSignature
#   - Certificate may be used to apply a digital signature
#   - Digital signatures are often used for entity authentication & data origin authentication with integrity
#
# nonRepudiation
#   - Certificate may be used to sign data as above but the certificate public key may be used to provide non-repudiation services
#   - This prevents the signing entity from falsely denying some action
#
# keyEncipherment
#   - Certificate may be used to encrypt a symmetric key which is then transferred to the target
#   - Target decrypts key, subsequently using it to encrypt & decrypt data between the entities
#
# dataEncipherment
#   - Certificate may be used to encrypt & decrypt actual application data
#
# keyAgreement
#   - Certificate enables use of a key agreement protocol to establish a symmetric key with a target
#   - Symmetric key may then be used to encrypt & decrypt data sent between the entities
#
# encipherOnly
#   - Public key used only for enciphering data while performing key agreement
#   - Req. KU: keyAgreement
#
# decipherOnly
#   - Public key used only for deciphering data while performing key agreement
#   -Req. KU: keyAgreement
# ##################################################################################################

[ req_ext ]
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always
basicConstraints = critical, CA:false
keyUsage = critical, digitalSignature, keyEncipherment # keyCertSign, nonRepudiation, cRLSign, dataEncipherment, keyAgreement, encipherOnly, decipherOnly
extendedKeyUsage = serverAuth,clientAuth
subjectAltName = @alt_names_tls

# ##################################################################################################
# Establish SubjectAltName (SAN) Profiles.
# ##################################################################################################

# Software Certificate !!! Must be defined in command line
[ alt_names_tls ]
DNS.0 = domain.tld
DNS.1 = www.domain.tld
