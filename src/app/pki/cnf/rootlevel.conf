# Simple PKI

# ##################################################################################################
# The first section of this configuration file is special and is referred to as the default section.
# This section is usually unnamed and spans from the start of file until the first named section.
# It contains global constants that can be referred to from the entire configuration file.
# It may also hold settings pertaining to more than one openssl command.
# ##################################################################################################

HOME = . # This definition stops the following lines choking if HOME isn't defined.
#dir = /etc/ssl/ca/root-ca # Top dir where everything is kept
dir = /E/Temp/ca/root-ca
caname=root-ca # CA name

# ##################################################################################################
# The next part of the configuration file is used by the openssl req command.
# It defines the CA's key pair, its DN, and the desired extensions for the CA  certificate.
# ##################################################################################################

[ req ]
default_bits = 4096 # RSA key size. The same as -newkey command line option.
encrypt_key = no # Protect private key. The same as -nodes command line option.
default_md = sha256 # MD to use. The same as -digest command line option.
utf8 = yes # Input is UTF-8
string_mask = utf8only # Emit UTF-8 strings
prompt = no # Don't prompt for DN
distinguished_name = req_distinguished_name # DN section
req_extensions =  req_ext # Desired extensions
attributes = req_attributes # section containing any request attributes
default_keyfile = $caname.key.pem # default filename to write a private key to -keyout
#x509_extensions = v3_ca # The extensions to add to the self signed cert
#input_password = # password for the input private key file. The same as -passin command line option.
#output_password = # password for the output private key file. The same as -passout command line option.
#oid_file # file containing additional OBJECT IDENTIFIERS
#oid_section = new_oids # extra object identifiers

[ req_distinguished_name ]
#countryName = Country Name (2 letter code)
#countryName_min = 2
#countryName_max = 2
countryName = "FR"
#stateOrProvinceName = State or Province Name (full name)
#localityName = Locality Name (eg, city)
#0.organizationName = Organization Name (eg, company)
organizationName = "Debian"
#organizationalUnitName = Organizational Unit Name (eg, section)
organizationalUnitName = "Buster"
#commonName = Common Name (e.g. server FQDN or YOUR name)
#commonName_max = 64
commonName = "Buster Root CA"
#emailAddress = Email Address
#emailAddress_max = 64
emailAddress = "none@none.fr"

[ req_attributes ]
# empty

# ##################################################################################################
# The remainder of the configuration file is used by the openssl ca command.
# The CA section defines the locations of CA assets, as well as the policies applying to the CA.
# ##################################################################################################

[ ca ]
default_ca = CA_default # The default CA section

[ CA_default ]
new_certs_dir = $dir/newcerts # The same as the -outdir command line option. It specifies the directory where new certificates will be placed. Mandatory.
certificate = $new_certs_dir/$caname.crt.pem # The same as -cert command line option. It gives the file containing the CA certificate. Mandatory.
private_key = $dir/private/$caname.key.pem # Same as the -keyfile command line option. The file containing the CA private key. Mandatory.
serial = $dir/db/$caname.serial # A text file containing the next serial number to use in hex. Mandatory. This file must be present and contain a valid serial number.
crlnumber = $dir/db/$caname.crlnumber # A text file containing the next CRL number to use in hex. The crl number will be inserted in the CRLs only if this file exists. If this file is present, it must contain a valid CRL number.
database = $dir/db/$caname.index.txt # The text database file to use. Mandatory. This file must be present though initially it will be empty.
crl =$dir/crl/$caname.crl.pem # The current CRL.
#RANDFILE = $dir/private/.rand # This is a random file to read/write random data to/from.
unique_subject = no # Require unique subject
default_days = 3652 # The same as the -days command line option. The number of days to certify a certificate for.
default_md = sha256 # The same as the -md comand line option. Mandatory except where the signing algorithm does not require a digest (i.e. Ed25519 and Ed448).
policy = policy_match # Default naming policy. The same as -policy command line option. Mandatory. See the POLICY FORMAT section for more information.
email_in_dn = no # The same as -noemailDN command line option. If you want the EMAIL field to be removed from the DN of the certificate simply set this to 'no'. If not present the default is to allow for the EMAIL filed in the certificate's DN.
preserve = no # Keep passed DN ordering. The same as -preserveDN command line option.
name_opt = multiline,-esc_msb,utf8 # Subject DN UTF8 display options. These options allow the format used to display the certificate details when asking the user to confirm signing.
cert_opt = ca_default # Certificate display options. It allows the format used to display the certificate details when asking the user to confirm signing.
copy_extensions = none # Determines how extensions in certificate requests should be handled. copy_extensions	= copy
x509_extensions = signing_ca_ext # Default cert extensions. The same as -extensions command line option.
default_crl_days = 365 # How long before next CRL. The same as the -crldays command line option. This will only be used if neither command line option is present.
crl_extensions = crl_ext # CRL extensions. The same as -crlexts command line option.

# ##################################################################################################
# Naming policies control which parts of a DN end up in the certificate and
# under what circumstances certification should be denied.
# ##################################################################################################

[ policy_match ]
countryName = match # Must match
stateOrProvinceName = optional # Included if present
localityName = optional # Included if present
organizationName = match # Must match
organizationalUnitName = optional # Included if present
commonName = supplied # Must be present
emailAddress = optional # Included if present

[ policy_anything ]
# Policy where we accept anything, and only require a CN. We can refer to this with a -policy policy_anything.
domainComponent = optional
countryName = optional
stateOrProvinceName = optional
localityName = optional
organizationName = optional
organizationalUnitName = optional
commonName = supplied
emailAddress = optional

# ##################################################################################################
# Certificate extensions define what types of certificates the CA is able to create.
# ##################################################################################################

[ root_ca_ext ]
keyUsage = critical,keyCertSign,cRLSign
basicConstraints = critical,CA:true
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always

[ signing_ca_ext ]
keyUsage = critical,keyCertSign,cRLSign
basicConstraints = critical,CA:true,pathlen:0
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always

[ usr_cert ]
# Extensions for when we sign normal certs (specified as default)
basicConstraints = CA:false # The issued certificate cannot be used as a CA
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = nonRepudiation, digitalSignature, keyEncipherment
subjectAltName = email:move

[ usr_cert_has_san ]
# Same as above, but cert req already has SubjectAltName
basicConstraints = CA:false
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer

[ req_ext ]
keyUsage = critical,keyCertSign,cRLSign
basicConstraints = critical,CA:true
subjectKeyIdentifier = hash
subjectAltName = email:move

[ v3_ca ]
# Extensions to use when signing a CA
keyUsage = critical,keyCertSign,cRLSign
basicConstraints = critical,CA:true
subjectKeyIdentifier = hash
authorityKeyIdentifier=keyid:always,issuer
subjectAltName=email:move

[ v3_ca_has_san ]
# Same as above, but CA req already has SubjectAltName
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer:always
basicConstraints = CA:true

# CRL extensions exist solely to point to the CA certificate that has issued the CRL.

[ crl_ext ]
authorityKeyIdentifier = keyid:always
